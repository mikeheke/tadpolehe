package mikeheke.tadpole.frm.sms.web.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import mikeheke.tadpole.frm.afw.entity.Application;
import mikeheke.tadpole.frm.base.util.AppConstant;
import mikeheke.tadpole.frm.base.util.DataConverter;
import mikeheke.tadpole.frm.base.util.DataValidater;
import mikeheke.tadpole.frm.base.vo.ReturnMessage;
import mikeheke.tadpole.frm.base.web.action.BaseAction;
import mikeheke.tadpole.frm.sms.entity.SmsTemplate;
import mikeheke.tadpole.frm.sms.service.SmsTemplateService;
import mikeheke.tadpole.frm.sms.util.SmsConstant;
import mikeheke.tadpole.frm.sms.vo.SmsTemplateVo;

/**
 * Created by IntelliJ IDEA.
 * @author huangweijin
 * Date: 2011-3-21
 * Time: 12:22:29
 * Declare：短信模板ACTION，适用于页面初始化，新增，修改，删除短信模板信息
 */

public class SmsTemplateAction extends BaseAction {
	
    /**
	 * 
	 */
	private static final long serialVersionUID = -4906368607527998551L;
	
	private SmsTemplateVo smsTemplateVo;
	
    //短信模板Service，用于执行业务逻辑
    private SmsTemplateService smsTemplateService;

    @Override
    public String initAdd() {
       
    	String result = INIT_ADD_SUCCESS;
		this.setOprt(AppConstant.ADD_OPRT);
        
        return result;
    }

    @Override
    public String add() {
       
    	String result = ADD_SUCCESS;
    	this.setOprt(AppConstant.ADD_OPRT);
    	
		if(!validateData()){
			return ADD_INPUT;
		}
		
		SmsTemplate smsTemplate = this.getEntity();
        
        ReturnMessage<SmsTemplate> returnMessage = smsTemplateService.add(smsTemplate);
        
        result = setReturnMessage(returnMessage, ADD_SUCCESS, ADD_INPUT);
       
        return result;
    }

    @Override
    public String initModify(){
      
    	String result = INIT_MODIFY_SUCCESS;
		this.setOprt(AppConstant.MDF_OPRT);
		
		String [] smsTemplateIds = null;
		if(null != smsTemplateVo){
			smsTemplateIds = smsTemplateVo.getSmsTemplateIds();
		}
		if(!validateIds0(smsTemplateIds)){
			return INIT_MODIFY_INPUT;
		}
		
		SmsTemplate smsTemplate = this.getEntity(smsTemplateIds[0]);
		ReturnMessage<SmsTemplate> returnMessage = null;
		returnMessage = smsTemplateService.query(smsTemplate);
       
		result = setReturnMessage(returnMessage, INIT_MODIFY_SUCCESS, INIT_MODIFY_INPUT);
		
        return result;
    }

    @Override
    public String modify() {
     
    	String result = MDF_SUCCESS;
        this.setOprt(AppConstant.MDF_OPRT);
        
		if(!validateData()){
			return MDF_INPUT;
		}
		
		String templateId = smsTemplateVo.getSmsTemplateId();
		if(!validateId(templateId)){
			return MDF_INPUT;
		}
		
		SmsTemplate smsTemplate = this.getEntity();
		
        ReturnMessage<SmsTemplate> returnMessage = null;
        returnMessage = smsTemplateService.update(smsTemplate);

        result = setReturnMessage(returnMessage, MDF_SUCCESS, MDF_INPUT);

        return result;
    }

    @Override
    public String delete() {
       
    	String result = DEL_INPUT;
		
		String[] smsTemplateIds = null;
		if(null != smsTemplateVo){
			smsTemplateIds = smsTemplateVo.getSmsTemplateIds();
		}
		if(validateIds(smsTemplateIds)){

			List<SmsTemplate> smsTemplates = this.getEntities(smsTemplateIds);
			ReturnMessage<SmsTemplate> returnMessage = null;
			returnMessage = smsTemplateService.logicDeleteList(smsTemplates);
			result = setReturnMessage(returnMessage, DEL_SUCCESS, DEL_INPUT);
		}
		
		setJsonValue(result); 
		
		return JSON;
    }

    @Override
    protected boolean validateData() {
        
    	boolean result = true;
        if (DataValidater.isStrEmpty(smsTemplateVo.getTemplateCode())) {
            result = setInputMessage(SmsConstant.TEMPLATE_CODE_KEY, SmsConstant.TEMPLATE_CODE_MSG);
        }

        if (DataValidater.isStrEmpty(smsTemplateVo.getSmsTemplateContent())) {
        	result = setInputMessage(SmsConstant.TEMPLATE_CONTENT_KEY, SmsConstant.TEMPLATE_CONTENT_MSG);
        }
        
        return result;
    }
    
    @Override
	protected SmsTemplate getEntity(String smsTemplateId) {
		
    	SmsTemplate smsTemplate = new SmsTemplate();
    	smsTemplate.setSmsTemplateId(DataConverter.stringToLong(smsTemplateId));
    	
		return smsTemplate;
	}

    @Override
	protected SmsTemplate getEntity() {
		
    	SmsTemplate smsTemplate = new SmsTemplate();
    	smsTemplate.setSmsTemplateId(
    			DataConverter.stringToLong(smsTemplateVo.getSmsTemplateId()));
    	smsTemplate.setTemplateCode(smsTemplateVo.getTemplateCode());
    	smsTemplate.setSmsTemplateContent(smsTemplateVo.getSmsTemplateContent());
    	Application application =  new Application();
    	application.setApplicationId(
    			DataConverter.stringToLong(smsTemplateVo.getApplicationId()));
    	smsTemplate.setApplication(application);
    	smsTemplate.setState(
    			DataConverter.stringToInteger(smsTemplateVo.getState()));
    	smsTemplate.setRemark(smsTemplateVo.getRemark());
    	smsTemplate.setCreatedTime(new Date());
    	smsTemplate.setCreatedUserId(getSysInfo().getUserProfile().getEmpNumber());
    	smsTemplate.setUpdatedTime(new Date());
    	smsTemplate.setUpdatedUserId(getSysInfo().getUserProfile().getEmpNumber());
    	
		return smsTemplate;
	}
    
    @Override
	protected List<SmsTemplate> getEntities(String[] smsTemplateIds) {
    	
    	List<SmsTemplate> smsTemplates = new ArrayList<SmsTemplate>(); 
		
		for(String smsTemplateId: smsTemplateIds){
			SmsTemplate smsTemplate = new SmsTemplate();
			smsTemplate.setSmsTemplateId(
					DataConverter.stringToLong(smsTemplateId));
			smsTemplates.add(smsTemplate);
		}
		return smsTemplates;
	}
    
    @Override
	public String getJsonValue() {
		return super.getJsonValue();
	}
    
	public SmsTemplateVo getSmsTemplateVo() {
		return smsTemplateVo;
	}

	public void setSmsTemplateVo(SmsTemplateVo smsTemplateVo) {
		this.smsTemplateVo = smsTemplateVo;
	}

	public void setSmsTemplateService(SmsTemplateService smsTemplateService) {
		this.smsTemplateService = smsTemplateService;
	}
    
}
