/**
 * 
 */
package mikeheke.tadpole.frm.tag.web.tag;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import mikeheke.tadpole.frm.base.util.AppConstant;
import mikeheke.tadpole.frm.base.util.DataConverter;
import mikeheke.tadpole.frm.base.util.DataValidater;
import mikeheke.tadpole.frm.tag.util.TagConstant;



/**
 * 自动充填标签
 * @author huangweijin
 */
public class AutoCompleteTag extends TextFieldTag implements TagConstant {
	
	private static final long serialVersionUID = -5196480943592588920L;

	// 数据来源类型（1.范围对象List<Entity>、2.范围对象List<Map>、3.范围对象JSON、4.基础数据服务
	private String dsType = DS_TYPE_DBS;
	
	// 指定数据来源，根据dsType取
	private String source;
	
	// 触发提示的最小字符数
	private String minLength = _1_STR;
	
	private String maxNum = _10_STR;
	
	// 过滤的列名，多个列名使用“|”分隔
	private String filterColNames;
	
	// 指定充填到标签体的过滤列名中的某一列列值
	private String fillColKey;
	
	// 是否充填表单 true：充填；其他/默认：不充填
	private String fillForm = FALSE_STR;
	
	private String showWidth = _0_STR;
	
	private String showHeight = _0_STR;

	/**
	 * 生成页面HTML代码
	 * 
	 * @return 页面代码StringBuffer
	 */
	@Override
	public StringBuffer generateHtmlControl() {

		StringBuffer buf = new StringBuffer(EMPTY_STR);
		addAutoCompleteControl(buf);
		addAutoCompleteLinkJs(buf);

		return buf;

	}
	
	private void addAutoCompleteControl(StringBuffer buf){
		
		addTextField(buf);
		if ((getFillColKey().split(
				AppConstant.SPILT_OPER)).length > 1) {
			addHiddenField(buf);
		}
	}
	
	private void addTextField(StringBuffer buf){
		
		buf.append(TAG_BEGIN).append(TAG_INPUT).append(EMPTY_ONE_STR);
		buf.append(generateThisAndSuperProps(AutoCompleteTag.class,
				new String[] {ID, NAME, VALUE}));
		buf.append(EMPTY_ONE_STR).append(ID).append(EQUAL_SIGN);
		buf.append(QUO_D_SIGN).append(getId()).append(QUO_D_SIGN);
		if(!DataValidater.isStrEmpty(getName())){
			buf.append(EMPTY_ONE_STR).append(NAME).append(EQUAL_SIGN);
			buf.append(QUO_D_SIGN).append(getName()).append(QUO_D_SIGN);
		}
		Object value = getTextFieldValue(getValue());
		if(value != null){
			buf.append(EMPTY_ONE_STR).append(VALUE).append(EQUAL_SIGN);
			buf.append(QUO_D_SIGN).append(value).append(QUO_D_SIGN);
		}
		buf.append(EMPTY_ONE_STR).append(TAG_END).append(ENTER_SIGN);

		addFieldTip(buf);
	}
	
	private void addFieldTip(StringBuffer buf){
		//buf.append("<font color=blue size=1 >["+minLength+"]</font>");
		final String tip = "<font color=blue size=5 >!</font>";
		buf.append(tip);
	}
	
	private void addHiddenField(StringBuffer buf){
		
		buf.append(TAG_BEGIN).append(TAG_INPUT).append(EMPTY_ONE_STR);
		buf.append(TYPE).append(EQUAL_SIGN).append(HIDDEN).append(EMPTY_ONE_STR);
		buf.append(EMPTY_ONE_STR).append(ID).append(EQUAL_SIGN);
		buf.append(QUO_D_SIGN).append(UNDER_SEP).append(getId()).append(QUO_D_SIGN);
		if(!DataValidater.isStrEmpty(getName())){
			buf.append(EMPTY_ONE_STR).append(NAME).append(EQUAL_SIGN);
			buf.append(QUO_D_SIGN).append(getName()).append(QUO_D_SIGN);
		}
		Object value = getHiddenFieldValue(getValue());
		if(value != null){
			buf.append(EMPTY_ONE_STR).append(VALUE).append(EQUAL_SIGN);
			buf.append(QUO_D_SIGN).append(value).append(QUO_D_SIGN);
		}
		buf.append(EMPTY_ONE_STR).append(TAG_END).append(ENTER_SIGN);
	}
	
	private Object getTextFieldValue(Object value){
		
		if(null == value){
			return null;
		}
		if(value instanceof Object[]){
			Object[] objArr = (Object[])value;
			if(objArr.length == 0){
				return null;
			}else{
				return objArr[0];
			}
		}else if(value instanceof String){
			String valueStr = (String) value;
			String[] strArr = valueStr.split(AppConstant.SPILT_OPER);
			return strArr.length>0?strArr[0]:EMPTY_STR;
		}
		return value;
	}
	
	private Object getHiddenFieldValue(Object value){
		
		if(null == value){
			return null;
		}
		if(value instanceof Object[]){
			Object[] objArr = (Object[])value;
			if(objArr.length == 0){
				return null;
			}else if(objArr.length>1){
				return objArr[1];
			}else{
				return objArr[0];
			}
		}else if(value instanceof Collection){
			Collection objCol = (Collection)value;
			if(objCol.size() == 0){
				return null;
			}else if(objCol.size()>1){
				return objCol.toArray()[1];
			}else{
				return objCol.toArray()[0];
			}
		}else if(value instanceof String){
			String valueStr = (String) value;
			String[] strArr = valueStr.split(AppConstant.SPILT_OPER);
			if(strArr.length > 1){
				return strArr[1];
			}else if(strArr.length > 0){
				return strArr[0];
			}else{
				return AppConstant.EMPTY_STR;
			}
		}
			
		return value;
	}
	
	private List<Map> getScopeObjectDatas(){
		
		Object scopeObject = getContextScopeObjectVal(source);
		if(null == scopeObject){
			return new ArrayList<Map>();
		}
		List<Map> datas = null;
		if(scopeObject instanceof Collection){
			Collection col = (Collection)scopeObject;
			datas = DataConverter.convertColToListMap(col);
		}
		
		return datas;
	}
	
	private void addAutoCompleteLinkJs(StringBuffer buf){
	
		buf.append(JS_BEGIN).append(ENTER_SIGN);
		buf.append(AUTO_COMPLETE_TAG_JS_FUNC).append(LEFT_X_KUO).append(QUO_D_SIGN);
		buf.append(getId()).append(QUO_D_SIGN).append(DOU_SIGN);
		buf.append(getUrl()).append(DOU_SIGN).append(QUO_D_SIGN);
		buf.append(getMinLength()).append(QUO_D_SIGN).append(DOU_SIGN);
		buf.append(getMaxNum()).append(DOU_SIGN).append(QUO_D_SIGN);
		buf.append(getDsType()).append(QUO_D_SIGN).append(DOU_SIGN).append(QUO_D_SIGN);
		buf.append(getSource()).append(QUO_D_SIGN).append(DOU_SIGN).append(QUO_D_SIGN);
		buf.append(getFilterColNames()).append(QUO_D_SIGN).append(DOU_SIGN).append(QUO_D_SIGN);
		buf.append(getFillColKey()).append(QUO_D_SIGN).append(DOU_SIGN);
		buf.append(getShowWidth()).append(DOU_SIGN);
		buf.append(getShowHeight()).append(DOU_SIGN).append(QUO_D_SIGN);
		buf.append(getBeforeSend()).append(QUO_D_SIGN).append(DOU_SIGN).append(QUO_D_SIGN);
		buf.append(getComplete()).append(QUO_D_SIGN).append(DOU_SIGN).append(QUO_D_SIGN);
		buf.append(getFilterClass()).append(QUO_D_SIGN).append(DOU_SIGN).append(QUO_D_SIGN);
		buf.append(getFilterPattern()).append(QUO_D_SIGN).append(DOU_SIGN);
		buf.append(getFillForm()).append(EMPTY_STR);
		buf.append(RIGHT_X_KUO).append(FEN_SIGN).append(ENTER_SIGN);
		buf.append(JS_END).append(ENTER_SIGN);
	}
	
	public String getUrl() {
		
		String url = EMPTY_STR;
		if(!TagConstant.DS_TYPE_DBS.equals(dsType)){
			url = getScopeObjectDatas().toString().replace(EQUAL_SIGN, MAO_SIGN);
		}else{
			url = QUO_S_SIGN + getBasePath() + UNIX_SEP + AUTO_COMPLETE_TAG_ACTION;
		}
		return url;
	}

	public String getDsType() {
		return dsType;
	}

	public void setDsType(String dsType) {
		this.dsType = dsType;
	}

	public String getSource() {
		return source;
	}

	public void setSource(String source) {
		this.source = source;
	}

	public String getMinLength() {
		return minLength;
	}

	public void setMinLength(String minLength) {
		this.minLength = minLength;
	}

	public String getFilterColNames() {
		if(DataValidater.isStrEmpty(filterColNames)){
			return getId();
		}
		return filterColNames;
	}

	public void setFilterColNames(String filterColNames) {
		this.filterColNames = filterColNames;
	}

	public String getFillColKey() {
		if(DataValidater.isStrEmpty(fillColKey)){
			return getId();
		}
		return fillColKey;
	}

	public void setFillColKey(String fillColKey) {
		this.fillColKey = fillColKey;
	}

	public String getFillForm() {
		return fillForm;
	}

	public void setFillForm(String fillForm) {
		this.fillForm = fillForm;
	}

	public String getShowWidth() {
		return showWidth;
	}

	public void setShowWidth(String showWidth) {
		this.showWidth = showWidth;
	}

	public String getShowHeight() {
		return showHeight;
	}

	public void setShowHeight(String showHeight) {
		this.showHeight = showHeight;
	}

	public String getMaxNum() {
		return maxNum;
	}

	public void setMaxNum(String maxNum) {
		this.maxNum = maxNum;
	}
	
}
