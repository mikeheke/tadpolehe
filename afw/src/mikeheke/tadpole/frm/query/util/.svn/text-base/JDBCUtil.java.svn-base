package mikeheke.tadpole.frm.query.util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import mikeheke.tadpole.frm.query.entity.Where;
import mikeheke.tadpole.frm.query.vo.Parameter;

public class JDBCUtil {
	private static final String LIKE = "LIKE";
	private static Log log = LogFactory.getLog(JDBCUtil.class);

	/**
	 * edit by Frankie
	 * 把原来SQL里的$SYSTEM_ID,$USER,$USER_CN,$USER_EN采用?代替，并在不影响原来顺序前提下插入ParaList
	 * 
	 * @param sql
	 * @param para
	 * @param paraList
	 * @return
	 */
	public static String generatePrecompileSQL(String sql, Map para,
			List<Parameter> paraList, List<Where> wheres) {

		HashMap paraLocaMap = new HashMap();
		// 由于语句中有Like,需要在?上置换成%?%
		ArrayList likeList = new ArrayList();
		String sqlLike = StringUtils.upperCase(sql);
		if (paraList != null && paraList.size() > 0) {

			int locate = 0;
			String[] temp = StringUtils.split(sql, "?");
			// 用locaList保存原来？的位置，并把原来ParaList里的值存进paraLocaMap，以备重新排序
			for (int i = 0; i < temp.length - 1; i++) {
				locate = StringUtils.indexOf(sql, "?", locate + 1);
				paraLocaMap.put(new Integer(locate), paraList.get(i));
			}
			// add by rex ，如果以？结尾的时候，要漏掉最后一个参数
			if (StringUtils.isNotBlank(sql) && sql.trim().endsWith("?")) {
				paraLocaMap.put(new Integer(sql.length()), paraList
						.get(paraList.size() - 1));
			}
		}

		// 存放语句中Like结尾位置

		while (StringUtils.indexOf(sqlLike, LIKE) != -1) {
			likeList.add((sqlLike.indexOf(LIKE) + 4) + "");
			sqlLike = StringUtils.replaceOnce(sqlLike, LIKE, "    ");
		}

		for (Iterator iter = para.keySet().iterator(); iter.hasNext();) {
			String key = (String) iter.next();
			Object value = null;
			if (para.get(key) != null) {
				value = para.get(key).toString();
			}

			// 只有非$开头的才去替换，
			if (key.startsWith("$") && value != null) {
				sql = StringUtils.replace(sql, key, value.toString());
			} else {//
			// 循环key,获取最靠近的单引号，在长度不变的前提下替换成?
				sql = getCurValueToMap(sql, paraLocaMap, likeList, key, value, wheres);
			}
		}
		paraList.clear();// 清空原来的paraList

		// 根据HashMap重排paraList
		generateCurParaList(paraList, paraLocaMap);
		log.info(sql);

		return sql;
	}

	// 根据HashMap重排paraList
	private static void generateCurParaList(List<Parameter> paraList,
			HashMap paraLocaMap) {
		while (!paraLocaMap.isEmpty()) {
			int minlength = 0;
			int curKey;
			for (Iterator it = paraLocaMap.entrySet().iterator(); it.hasNext();) {
				Map.Entry e = (Map.Entry) it.next();
				if (minlength == 0) {
					minlength = ((Integer) e.getKey()).intValue();
				}
				curKey = ((Integer) e.getKey()).intValue();
				if (curKey < minlength) {
					minlength = curKey;
				}
			}
			// 将最少的存进paraList,并从HashMap中移除
			/*log.info("key" + new Integer(minlength) + " Value="
					+ paraLocaMap.get(new Integer(minlength)));*/
			//paraList.add(new Parameter("Integer",paraLocaMap.get(new Integer(minlength)).toString()));
			paraList.add((Parameter)paraLocaMap.get(new Integer(minlength)));
			paraLocaMap.remove(new Integer(minlength));

		}
	}

	// edit by Frankie 2010-1-28
	// 循环key,截取和key最靠近的前后单引号的字段，为了以前保存定位数值的可用性，需要在保持长度不变的前提下替换成?,Like语句后面的值需要设置成%?%
	private static String getCurValueToMap(String sql, HashMap paraLocaMap,
			ArrayList likeList, String key, Object value, List<Where> wheres) {
		int keylength = key.length();
		// 由于是$开头，需要转义才能正确获取
		String[] keyArray = sql.split("\\" + key);
		int additionLength = 0;
		for (int i = 0; i < keyArray.length - 1; i++) {
			String splitBeginSQL = (String) keyArray[i];
			String splitEndSQL = (String) keyArray[i + 1];
			int beginLocate = additionLength
					+ StringUtils.lastIndexOf(splitBeginSQL, "'");
			additionLength += splitBeginSQL.length() + keylength;
			int endLocate = additionLength
					+ StringUtils.indexOf(splitEndSQL, "'") + 1;
			// 对比beginLocate和beginLocate前的like字段,如果中间相隔字符串全为空格,把该?的value设置成%?%
			for (Iterator iter = likeList.iterator(); iter.hasNext();) {
				String likeInt = (String) iter.next();
				if (beginLocate > Integer.parseInt(likeInt)) {
					if ("".equals(StringUtils.substring(sql,
							Integer.parseInt(likeInt), beginLocate).trim())) {
						value = "%".concat(value.toString()).concat("%");
					}
				}
			}
			// 获取参数的数据类型
			String dataType = "";
			for(Where where: wheres){
				if(where.getWhereResult().indexOf(key) != -1){
					dataType = where.getDataType();
				}
			}
			paraLocaMap.put(new Integer(beginLocate), new Parameter(dataType, value.toString()));// para的真实值
			StringBuffer replaceString = new StringBuffer("");
			for (int j = 0; j < endLocate - beginLocate - 1; j++) {
				replaceString.append(" ");// 为了保持长度不变，在需要改变?的地方循环添加空格
			}
			replaceString.append("?");
			sql = StringUtils.replace(sql, StringUtils.substring(sql,
					beginLocate, endLocate), replaceString.toString());
		}
		return sql;

	}


}
